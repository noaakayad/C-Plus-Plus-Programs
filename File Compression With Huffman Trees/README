Here, I am implementing our own file compression tool using the Huffman algorithm.


File Compression
The compress program is taking as input an arbitrary file (original_file) and will use Huffman Compression to create a compressed version of the file (compressed_file):

Construct a Huffman code for the contents of original_file
Use the constructed Huffman code to encode original_file
Write the results (with a header to allow for uncompression) to compressed_file

                   
File Uncompression
The uncompress program will then take as input a compressed file created by your compress program (compressed_file) and will uncompress the file (uncompressed_file):

Construct a Huffman code by reading the header of compressed_file
Use the constructed Huffman code to decode compressed_file
Write the results to uncompressed_file





In this code I suppose that I won't compress files with a size above 10MB, thus, the maximum frequency of a character is 10 000 000.
But then, we don't need to use the type 'int' for our integers because this type use 32 bits and then can write integers until 2^32 = 4 294 967 296 
and we only need to go until 10 000 000. Nevertheless, 2^23 = 8 388 608 and 2^24 = 16 777 216, thus we 'only' need 24 bits instead of 32 to write frequencies as the Huffman 
algorithm wants.
That's why I have created the struct Int24 that convert an 'int' into a 24 bits integers.
                   
